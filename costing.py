# -*- coding: utf-8 -*-
"""costing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gJBJBJT7pMD3IRhdnglWzuiJ1Vv47R5c
"""

import streamlit as st
import tiktoken

GEMINI_MODELS = {
    "Gemini 2.0 Flash":      {"input": 0.10, "output": 0.40},
    "Gemini 2.0 Flash-Lite": {"input": 0.07, "output": 0.30},
}

OPENAI_MODELS = {
    "OpenAI 2.0 Flash": {"input": 2.50, "output": 7.50},
    "OpenAI o4-mini":   {"input": 1.10, "output": 4.40},
    "GPT-4o":           {"input": 3.75, "output": 15.00},
    "GPT-4o mini":      {"input": 0.30, "output": 1.20},
}

TASK_TYPES = ["Summarization", "Question Answering", "Text Generation", "Chat Completion"]
WORKING_DAYS = 22

encoding = tiktoken.get_encoding("cl100k_base")
def count_tokens(text: str) -> int:
    """Return number of BPE tokens in text using tiktoken."""
    return len(encoding.encode(text))

st.set_page_config(page_title="Cost Estimator Comparison", layout="centered")
st.sidebar.header("⚙️ Setup")

app = st.sidebar.selectbox("Select Application", [
    "Intelligent Search", "Insight Faber", "ChatDB", "DataSynth"
])

mode = st.sidebar.radio("Input Mode", ["Automatic Calculation", "Daily Tokens Input"])

gemini_model = st.sidebar.selectbox("Gemini Model", list(GEMINI_MODELS.keys()))
openai_model = st.sidebar.selectbox("OpenAI Model", list(OPENAI_MODELS.keys()))

task_type = st.sidebar.selectbox("Task Type", TASK_TYPES)

show_rates = st.sidebar.checkbox("Show base model rates")

st.title(f"{app} – Cost Estimator Comparison")
st.markdown(f"**Mode:** {mode} · **Task:** {task_type}")

if show_rates:
    with st.expander("Base cost per 1 M tokens"):
        gm = GEMINI_MODELS[gemini_model]
        oa = OPENAI_MODELS[openai_model]
        st.write(f"**{gemini_model}** → Input: ${gm['input']}/M · Output: ${gm['output']}/M")
        st.write(f"**{openai_model}** → Input: ${oa['input']}/M · Output: ${oa['output']}/M")

st.markdown("---")
st.subheader("🔢 Input Details")

daily_in = daily_out = 0
if mode == "Daily Tokens Input":
    col1, col2 = st.columns(2)
    with col1:
        daily_in = st.number_input("📥 Total Daily Input Tokens", min_value=0, value=0)
    with col2:
        daily_out = st.number_input("📤 Total Daily Output Tokens", min_value=0, value=0)
else:
    uploaded_file = st.file_uploader("Upload Text File (.txt)", type=["txt"])
    input_text    = st.text_area("Or paste text here:")

    source_text = ""
    if uploaded_file:
        source_text = uploaded_file.read().decode("utf-8")
    elif input_text:
        source_text = input_text

    if source_text:
        num_tokens = count_tokens(source_text)
        st.info(f"Detected **{num_tokens}** tokens in input")

        if task_type == "Summarization":
            daily_in, daily_out = num_tokens, int(num_tokens * 0.2)
        elif task_type == "Question Answering":
            daily_in, daily_out = num_tokens, int(num_tokens * 0.15)
        elif task_type == "Text Generation":
            daily_in, daily_out = num_tokens, int(num_tokens * 2.0)
        elif task_type == "Chat Completion":
            daily_in, daily_out = num_tokens, int(num_tokens * 0.5)

def calc_cost(tokens: int, rates: dict) -> tuple[float, float]:
    m = tokens / 1_000_000
    return m * rates["input"], m * rates["output"]

gm_rates  = GEMINI_MODELS[gemini_model]
oa_rates  = OPENAI_MODELS[openai_model]

gm_in, gm_out = calc_cost(daily_in, gm_rates), calc_cost(daily_out, gm_rates)
oa_in, oa_out = calc_cost(daily_in, oa_rates), calc_cost(daily_out, oa_rates)

gm_daily  = gm_in[0]  + gm_out[1]
oa_daily  = oa_in[0]  + oa_out[1]

st.markdown("---")
st.subheader("📊 Summary of Token Usage")
st.write(f"**Daily Input Tokens:** {daily_in:,}")
st.write(f"**Daily Output Tokens:** {daily_out:,}")

col1, col2 = st.columns(2)
with col1:
    st.markdown(f"### 💸 {gemini_model}")
    st.write(f"Input Cost:  ${gm_in[0]:.4f}")
    st.write(f"Output Cost: ${gm_out[1]:.4f}")
    st.success(f"Total Daily: ${gm_daily:.4f}")
    st.write(f"Monthly (×{WORKING_DAYS}d): ${gm_daily * WORKING_DAYS:.2f}")
with col2:
    st.markdown(f"### 💸 {openai_model}")
    st.write(f"Input Cost:  ${oa_in[0]:.4f}")
    st.write(f"Output Cost: ${oa_out[1]:.4f}")
    st.success(f"Total Daily: ${oa_daily:.4f}")
    st.write(f"Monthly (×{WORKING_DAYS}d): ${oa_daily * WORKING_DAYS:.2f}")

st.markdown("---")